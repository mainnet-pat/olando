diff --git a/node_modules/cashscript/dist/Contract.d.ts b/node_modules/cashscript/dist/Contract.d.ts
index 614c558..7dbf4c1 100644
--- a/node_modules/cashscript/dist/Contract.d.ts
+++ b/node_modules/cashscript/dist/Contract.d.ts
@@ -14,7 +14,7 @@ export declare class Contract<TArtifact extends Artifact = Artifact, TResolved e
     unlock: AbiToFunctionMap<TArtifact['abi'], Unlocker>;
 }> {
     artifact: TArtifact;
-    private options?;
+    options?: ContractOptions | undefined;
     name: string;
     address: string;
     tokenAddress: string;
diff --git a/node_modules/cashscript/dist/Contract.js b/node_modules/cashscript/dist/Contract.js
index 9284a34..246b071 100644
--- a/node_modules/cashscript/dist/Contract.js
+++ b/node_modules/cashscript/dist/Contract.js
@@ -36,7 +36,7 @@ export class Contract {
         else {
             artifact.abi.forEach((f, i) => {
                 // @ts-ignore TODO: see if we can use generics to make TypeScript happy
-                this.functions[f.name] = this.createFunction(f, i);
+                this.functions[f.name] = this.createFunction(f, this.options.ignoreFunctionSelector ? undefined : i);
             });
         }
         // Populate the functions object with the contract's functions
@@ -50,7 +50,7 @@ export class Contract {
         else {
             artifact.abi.forEach((f, i) => {
                 // @ts-ignore TODO: see if we can use generics to make TypeScript happy
-                this.unlock[f.name] = this.createUnlocker(f, i);
+                this.unlock[f.name] = this.createUnlocker(f, this.options.ignoreFunctionSelector ? undefined : i);
             });
         }
         this.name = artifact.contractName;
diff --git a/node_modules/cashscript/dist/LibauthTemplate.js b/node_modules/cashscript/dist/LibauthTemplate.js
index a1fbacb..2856276 100644
--- a/node_modules/cashscript/dist/LibauthTemplate.js
+++ b/node_modules/cashscript/dist/LibauthTemplate.js
@@ -16,7 +16,7 @@ export const buildTemplate = async ({ transaction, transactionHex = undefined, /
         supported: ['BCH_2025_05'],
         version: 0,
         entities: generateTemplateEntities(contract.artifact, transaction.abiFunction, transaction.encodedFunctionArgs),
-        scripts: generateTemplateScripts(contract.artifact, contract.addressType, transaction.abiFunction, transaction.encodedFunctionArgs, contract.encodedConstructorArgs),
+        scripts: generateTemplateScripts(contract.artifact, contract.addressType, transaction.abiFunction, transaction.encodedFunctionArgs, contract.encodedConstructorArgs, contract.options),
         scenarios: generateTemplateScenarios(contract, transaction, txHex, contract.artifact, transaction.abiFunction, transaction.encodedFunctionArgs, contract.encodedConstructorArgs),
     };
     transaction.inputs
@@ -99,10 +99,10 @@ const generateTemplateEntities = (artifact, abiFunction, encodedFunctionArgs) =>
     }
     return entities;
 };
-const generateTemplateScripts = (artifact, addressType, abiFunction, encodedFunctionArgs, encodedConstructorArgs) => {
+const generateTemplateScripts = (artifact, addressType, abiFunction, encodedFunctionArgs, encodedConstructorArgs, contractOptions) => {
     // definition of locking scripts and unlocking scripts with their respective bytecode
     return {
-        [artifact.contractName + '_unlock']: generateTemplateUnlockScript(artifact, abiFunction, encodedFunctionArgs),
+        [artifact.contractName + '_unlock']: generateTemplateUnlockScript(artifact, abiFunction, encodedFunctionArgs, contractOptions),
         [artifact.contractName + '_lock']: generateTemplateLockScript(artifact, addressType, encodedConstructorArgs),
     };
 };
@@ -119,9 +119,9 @@ const generateTemplateLockScript = (artifact, addressType, constructorArguments)
         ].join('\n'),
     };
 };
-const generateTemplateUnlockScript = (artifact, abiFunction, encodedFunctionArgs) => {
+const generateTemplateUnlockScript = (artifact, abiFunction, encodedFunctionArgs, contractOptions) => {
     const functionIndex = artifact.abi.findIndex((func) => func.name === abiFunction.name);
-    const functionIndexString = artifact.abi.length > 1
+    const functionIndexString = artifact.abi.length > 1 && !contractOptions?.ignoreFunctionSelector
         ? ['// function index in contract', `<function_index> // int = <${functionIndex}>`, '']
         : [];
     return {
diff --git a/node_modules/cashscript/dist/TransactionBuilder.js b/node_modules/cashscript/dist/TransactionBuilder.js
index 5ed4af9..5702687 100644
--- a/node_modules/cashscript/dist/TransactionBuilder.js
+++ b/node_modules/cashscript/dist/TransactionBuilder.js
@@ -1,6 +1,6 @@
 import { binToHex, decodeTransaction, encodeTransaction, hexToBin, } from '@bitauth/libauth';
 import delay from 'delay';
-import { isUnlockableUtxo, isStandardUnlockableUtxo, } from './interfaces.js';
+import { isUnlockableUtxo, isStandardUnlockableUtxo, isP2PKHUnlocker, } from './interfaces.js';
 import { cashScriptOutputToLibauthOutput, createOpReturnOutput, validateInput, validateOutput, } from './utils.js';
 import { FailedTransactionError } from './Errors.js';
 import { getBitauthUri } from './LibauthTemplate.js';
@@ -96,6 +96,10 @@ export class TransactionBuilder {
         return binToHex(encodeTransaction(transaction));
     }
     debug() {
+        // do not debug a pure P2PKH-spend transaction
+        if (this.inputs.every((input) => isP2PKHUnlocker(input.unlocker))) {
+            return {};
+        }
         if (this.inputs.some((input) => !isStandardUnlockableUtxo(input))) {
             throw new Error('Cannot debug a transaction with custom unlocker');
         }
diff --git a/node_modules/cashscript/dist/advanced/LibauthTemplate.js b/node_modules/cashscript/dist/advanced/LibauthTemplate.js
index 040442f..8102b52 100644
--- a/node_modules/cashscript/dist/advanced/LibauthTemplate.js
+++ b/node_modules/cashscript/dist/advanced/LibauthTemplate.js
@@ -119,7 +119,7 @@ export const generateTemplateScriptsP2SH = (contract, abiFunction, encodedFuncti
     const unlockingScriptName = getUnlockScriptName(contract, abiFunction, inputIndex);
     const lockingScriptName = getLockScriptName(contract);
     return {
-        [unlockingScriptName]: generateTemplateUnlockScript(contract, abiFunction, encodedFunctionArgs, inputIndex),
+        [unlockingScriptName]: generateTemplateUnlockScript(contract, abiFunction, encodedFunctionArgs, inputIndex, contract.options),
         [lockingScriptName]: generateTemplateLockScript(contract, encodedConstructorArgs),
     };
 };
@@ -150,10 +150,10 @@ const generateTemplateLockScript = (contract, constructorArguments) => {
  * https://ide.bitauth.com/authentication-template-v0.schema.json
  *
  */
-const generateTemplateUnlockScript = (contract, abiFunction, encodedFunctionArgs, inputIndex) => {
+const generateTemplateUnlockScript = (contract, abiFunction, encodedFunctionArgs, inputIndex, contractOptions) => {
     const scenarioIdentifier = `${contract.artifact.contractName}_${abiFunction.name}_input${inputIndex}_evaluate`;
     const functionIndex = contract.artifact.abi.findIndex((func) => func.name === abiFunction.name);
-    const functionIndexString = contract.artifact.abi.length > 1
+    const functionIndexString = contract.artifact.abi.length > 1 && !contractOptions?.ignoreFunctionSelector
         ? ['// function index in contract', `<function_index> // int = <${functionIndex}>`, '']
         : [];
     return {
diff --git a/node_modules/cashscript/dist/interfaces.d.ts b/node_modules/cashscript/dist/interfaces.d.ts
index c019fa4..b2a8dde 100644
--- a/node_modules/cashscript/dist/interfaces.d.ts
+++ b/node_modules/cashscript/dist/interfaces.d.ts
@@ -110,5 +110,6 @@ export interface TransactionDetails extends Transaction {
 export interface ContractOptions {
     provider?: NetworkProvider;
     addressType?: AddressType;
+    ignoreFunctionSelector?: boolean;
 }
 export type AddressType = 'p2sh20' | 'p2sh32';
diff --git a/node_modules/cashscript/dist/network/MockNetworkProvider.d.ts b/node_modules/cashscript/dist/network/MockNetworkProvider.d.ts
index 9fdeb86..4f0685f 100644
--- a/node_modules/cashscript/dist/network/MockNetworkProvider.d.ts
+++ b/node_modules/cashscript/dist/network/MockNetworkProvider.d.ts
@@ -11,6 +11,6 @@ export default class MockNetworkProvider implements NetworkProvider {
     getBlockHeight(): Promise<number>;
     getRawTransaction(txid: string): Promise<string>;
     sendRawTransaction(txHex: string): Promise<string>;
-    addUtxo(address: string, utxo: Utxo): void;
+    addUtxo(addressOrLockingBytecode: string, utxo: Utxo): void;
     reset(): void;
 }
diff --git a/node_modules/cashscript/dist/network/MockNetworkProvider.js b/node_modules/cashscript/dist/network/MockNetworkProvider.js
index eda3eff..0b20628 100644
--- a/node_modules/cashscript/dist/network/MockNetworkProvider.js
+++ b/node_modules/cashscript/dist/network/MockNetworkProvider.js
@@ -1,4 +1,4 @@
-import { binToHex, hexToBin } from '@bitauth/libauth';
+import { binToHex, decodeTransaction, hexToBin, isHex } from '@bitauth/libauth';
 import { sha256 } from '@cashscript/utils';
 import { Network } from '../interfaces.js';
 import { addressToLockScript, randomUtxo } from '../utils.js';
@@ -8,6 +8,7 @@ const bobAddress = 'bchtest:qz6q5gqnxdldkr07xpls5474mmzmlesd6qnux4skuc';
 const carolAddress = 'bchtest:qqsr7nqwe6rq5crj63gy5gdqchpnwmguusmr7tfmsj';
 export default class MockNetworkProvider {
     constructor() {
+        // we use lockingBytecode as the key for utxoMap to make cashaddresses and tokenaddresses interchangeable
         this.utxoMap = {};
         this.transactionMap = {};
         this.network = Network.MOCKNET;
@@ -35,10 +36,46 @@ export default class MockNetworkProvider {
         const transactionBin = hexToBin(txHex);
         const txid = binToHex(sha256(sha256(transactionBin)).reverse());
         this.transactionMap[txid] = txHex;
+        const decoded = decodeTransaction(transactionBin);
+        if (typeof decoded === 'string') {
+            throw new Error(`${decoded}`);
+        }
+        // remove (spend) UTXOs from the map
+        for (const input of decoded.inputs) {
+            for (const address of Object.keys(this.utxoMap)) {
+                const utxos = this.utxoMap[address];
+                const index = utxos.findIndex((utxo) => utxo.txid === binToHex(input.outpointTransactionHash) && utxo.vout === input.outpointIndex);
+                if (index !== -1) {
+                    // Remove the UTXO from the map
+                    utxos.splice(index, 1);
+                    this.utxoMap[address] = utxos;
+                    break; // Exit loop after finding and removing the UTXO
+                }
+                if (utxos.length === 0) {
+                    delete this.utxoMap[address]; // Clean up empty address entries
+                }
+            }
+        }
+        // add new UTXOs to the map
+        for (const [index, output] of decoded.outputs.entries()) {
+            this.addUtxo(binToHex(output.lockingBytecode), {
+                txid: txid,
+                vout: index,
+                satoshis: output.valueSatoshis,
+                token: output.token && {
+                    ...output.token,
+                    category: binToHex(output.token.category),
+                    nft: output.token.nft && {
+                        ...output.token.nft,
+                        commitment: binToHex(output.token.nft.commitment),
+                    },
+                },
+            });
+        }
         return txid;
     }
-    addUtxo(address, utxo) {
-        const lockingBytecode = binToHex(addressToLockScript(address));
+    addUtxo(addressOrLockingBytecode, utxo) {
+        const lockingBytecode = isHex(addressOrLockingBytecode) ? addressOrLockingBytecode : binToHex(addressToLockScript(addressOrLockingBytecode));
         if (!this.utxoMap[lockingBytecode]) {
             this.utxoMap[lockingBytecode] = [];
         }
